# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  id: Int!
  zip_code: Int!
  street: String!
  region: String!
  country: String!
}

type BreedCharacteristic {
  id: Int!
  label: String!
  description: String
}

type PetType {
  id: Int!
  name: String!
  breeds: [Breed!]!
}

type Breed {
  id: Int!
  name: String!
  breed_characteristics: [BreedCharacteristic!]!
  type: PetType!
}

type Pet {
  id: Int!
  name: String!
  age: Int!
  sexe: Sexe!
  aboutMe: String!
  type: Breed!
  user: User!
}

enum Sexe {
  Masculin
  Feminin
}

type User {
  id: Int!
  first_name: String!
  last_name: String!
  phone: Int!
  email: String!
  password: String!
  bio: String!
  birth_date: DateTime!
  address: Address!
  pets: [Pet!]!
  image: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Review {
  id: Int!
  description: String!
  user: User!
  pet: Pet!
}

type LikePet {
  id: Int!
  pet: Pet!
  likedPet: Pet!
}

type Match {
  id: Int!
  likePetRight: LikePet!
  likePetLeft: LikePet!
}

type Conversation {
  id: Int!
  match: Match!
  messages: [Message!]!
}

type Message {
  id: Int!
  receiver: Pet!
  sender: Pet!
  content: String!
  conversation: Conversation!
}

type SignInResponseDto {
  token: String!
  user: User!
}

type ValidateEmailResponseDto {
  user_exists: Boolean!
}

type Query {
  Addresses: [Address!]!
  Address(id: Int!): Address!
  users: [User!]
  user(id: Int!): User
  reviews: [Review!]!
  review(id: Int!): Review!
  pets: [Pet!]!
  pet(id: Int!): Pet!
  pet_likes: [LikePet!]!
  pet_like(id: Int!): LikePet!
  messages: [Message!]!
  message(id: Int!): Message!
  conversations: [Conversation!]!
  conversation(id: Int!): Conversation!
  matches: [Match!]!
  match(id: Int!): Match!
  pet_types: [PetType!]!
  pet_type(id: Int!): PetType!
  breeds: [Breed!]!
  breed(id: Int!): Breed!
  breed_Characteristics: [BreedCharacteristic!]!
  breed_Characteristic(id: Int!): BreedCharacteristic!
  login(credentials: SignInDto!): SignInResponseDto!
  validateEmail(email: String!): ValidateEmailResponseDto!
}

input SignInDto {
  email: String!
  password: String!
}

type Mutation {
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(updateAddressInput: UpdateAddressInput!): Address!
  removeAddress(id: Int!): String!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): String!
  createReview(createReviewInput: CreateReviewInput!): Review!
  updateReview(updateReviewInput: UpdateReviewInput!): Review!
  removeReview(id: Int!): String!
  createPet(createPetInput: CreatePetInput!): Pet!
  updatePet(updatePetInput: UpdatePetInput!): Pet!
  removePet(id: Int!): String!
  createLike(createLikeInput: CreateLikePetInput!): LikePet!
  updateLike(updateLikeInput: UpdateLikePetInput!): LikePet!
  removeLike(id: Int!): LikePet!
  createMessage(createMessageInput: CreateMessageInput!): Message!
  updateMessage(updateMessageInput: UpdateMessageInput!): Message!
  removeMessage(id: Int!): String!
  createConversation(createConversationInput: CreateConversationInput!): Conversation!
  updateConversation(updateConversationInput: UpdateConversationInput!): Conversation!
  removeConversation(id: Int!): Conversation!
  createMatch(createMatchInput: CreateMatchInput!): Match!
  updateMatch(updateMatchInput: UpdateMatchInput!): Match!
  removeMatch(id: Int!): Match!
  createType(createTypeInput: CreatePetTypeInput!): PetType!
  updateType(updateTypeInput: UpdatePetTypeInput!): PetType!
  removeType(id: Int!): String!
  createBreed(createBreedInput: CreateBreedInput!): Breed!
  updateBreed(updateBreedInput: UpdateBreedInput!): Breed!
  removeBreed(id: Int!): Breed!
  createBreedCharacteristic(createBreedCharacteristicInput: CreateBreedCharacteristicInput!): BreedCharacteristic!
  updateBreedCharacteristic(updateBreedCharacteristicInput: UpdateBreedCharacteristicInput!): BreedCharacteristic!
  removeBreedCharacteristic(id: Int!): String!
  SignUp(registerDto: RegisterDto!): User!
}

input CreateAddressInput {
  zip_code: Int!
  street: String!
  region: String!
  country: String!
}

input UpdateAddressInput {
  zip_code: Int
  street: String
  region: String
  country: String
  id: Int!
}

input CreateUserInput {
  first_name: String!
  last_name: String!
  phone: Int!
  bio: String!
  email: String!
  birth_date: DateTime!
  address: CreateAddressInput!
  password: String!
}

input UpdateUserInput {
  first_name: String
  last_name: String
  phone: Int
  bio: String
  email: String
  birth_date: DateTime
  address: CreateAddressInput
  password: String
  id: Int!
  image: String!
}

input CreateReviewInput {
  description: String!
  pet: CreatePetInput!
}

input CreatePetInput {
  name: String!
  age: Int!
  sexe: SexeEnum!
  aboutMe: String!
  user: Float!
  type: Float!
}

enum SexeEnum {
  Masculin
  Feminin
}

input UpdateReviewInput {
  description: String
  pet: CreatePetInput
  id: Int!
}

input UpdatePetInput {
  name: String
  age: Int
  sexe: SexeEnum
  aboutMe: String
  user: Float
  type: Float
  id: Int!
}

input CreateLikePetInput {
  pet: CreatePetInput!
  likedPet: CreatePetInput!
}

input UpdateLikePetInput {
  pet: CreatePetInput
  likedPet: CreatePetInput
  id: Int!
}

input CreateMessageInput {
  receiver: CreatePetInput!
  sender: CreatePetInput!
  content: String!
  conversation: CreateConversationInput!
}

input CreateConversationInput {
  match: CreateMatchInput!
  messages: [CreateMessageInput!]!
}

input CreateMatchInput {
  likePetRight: CreateLikePetInput!
  likePetLeft: CreateLikePetInput!
}

input UpdateMessageInput {
  receiver: CreatePetInput
  sender: CreatePetInput
  content: String
  conversation: CreateConversationInput
  id: Int!
}

input UpdateConversationInput {
  match: CreateMatchInput
  messages: [CreateMessageInput!]
  id: Int!
}

input UpdateMatchInput {
  likePetRight: CreateLikePetInput
  likePetLeft: CreateLikePetInput
  id: Int!
}

input CreatePetTypeInput {
  name: String!
}

input UpdatePetTypeInput {
  name: String
  id: Int!
}

input CreateBreedInput {
  name: String!
  type: Float!
}

input UpdateBreedInput {
  name: String
  type: Float
  id: Int!
}

input CreateBreedCharacteristicInput {
  label: String!
  description: String
}

input UpdateBreedCharacteristicInput {
  label: String
  description: String
  id: Int!
}

input RegisterDto {
  first_name: String!
  last_name: String!
  phone: Int!
  email: String!
  birth_date: DateTime!
  address: CreateAddressInput!
  password: String!
}
